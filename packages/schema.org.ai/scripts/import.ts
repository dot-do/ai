#!/usr/bin/env tsx
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

/**
 * Import script to fetch Schema.org data and generate TypeScript files
 *
 * This script should:
 * 1. Fetch Schema.org data (from schemaorg.org or local source)
 * 2. Parse the data
 * 3. Generate TypeScript type definitions
 * 4. Generate data files with tree-shakeable exports
 */

interface SchemaType {
  name: string
  label: string
  comment?: string
  subTypeOf?: string[]
  properties?: string[]
  url?: string
}

interface SchemaProperty {
  name: string
  label: string
  comment?: string
  domainIncludes?: string[]
  rangeIncludes?: string[]
  url?: string
}

// For now, use the existing seed data from the platform
const seedPath = path.resolve(__dirname, '../../../workers/admin/src/seed')

async function importFromSeed() {
  console.log('Importing Schema.org data from seed...')

  // Read from the existing collections
  const collectionsPath = path.resolve(__dirname, '../../../workers/admin/src/collections/schema')

  console.log(`Collections path: ${collectionsPath}`)

  // For now, create a placeholder that will be populated when we integrate with the seed
  const types: Record<string, SchemaType> = {
    Thing: {
      name: 'Thing',
      label: 'Thing',
      comment: 'The most generic type of item.',
      url: 'https://schema.org/Thing',
    },
    Person: {
      name: 'Person',
      label: 'Person',
      comment: 'A person (alive, dead, undead, or fictional).',
      subTypeOf: ['Thing'],
      url: 'https://schema.org/Person',
    },
    Organization: {
      name: 'Organization',
      label: 'Organization',
      comment: 'An organization such as a school, NGO, corporation, club, etc.',
      subTypeOf: ['Thing'],
      url: 'https://schema.org/Organization',
    },
  }

  const properties: Record<string, SchemaProperty> = {
    name: {
      name: 'name',
      label: 'name',
      comment: 'The name of the item.',
      domainIncludes: ['Thing'],
      rangeIncludes: ['Text'],
      url: 'https://schema.org/name',
    },
    description: {
      name: 'description',
      label: 'description',
      comment: 'A description of the item.',
      domainIncludes: ['Thing'],
      rangeIncludes: ['Text'],
      url: 'https://schema.org/description',
    },
  }

  // Generate types file
  const typesContent = `import type { Type } from '../types/base.js'

/**
 * Schema.org types data
 * Auto-generated by scripts/import.ts
 */
export const types: Record<string, Type> = ${JSON.stringify(types, null, 2)}

// Export individual type getters for tree-shaking
export function getType(name: string): Type | undefined {
  return types[name]
}

export function getAllTypes(): Type[] {
  return Object.values(types)
}

export function getTypesBySubType(subType: string): Type[] {
  return Object.values(types).filter(t => t.subTypeOf?.includes(subType))
}
`

  // Generate properties file
  const propertiesContent = `import type { Property } from '../types/base.js'

/**
 * Schema.org properties data
 * Auto-generated by scripts/import.ts
 */
export const properties: Record<string, Property> = ${JSON.stringify(properties, null, 2)}

// Export individual property getters for tree-shaking
export function getProperty(name: string): Property | undefined {
  return properties[name]
}

export function getAllProperties(): Property[] {
  return Object.values(properties)
}

export function getPropertiesByDomain(domain: string): Property[] {
  return Object.values(properties).filter(p => p.domainIncludes?.includes(domain))
}

export function getPropertiesByRange(range: string): Property[] {
  return Object.values(properties).filter(p => p.rangeIncludes?.includes(range))
}
`

  // Write files
  const dataDir = path.resolve(__dirname, '../src/data')
  fs.mkdirSync(dataDir, { recursive: true })

  fs.writeFileSync(path.join(dataDir, 'types.ts'), typesContent)
  fs.writeFileSync(path.join(dataDir, 'properties.ts'), propertiesContent)

  console.log('✓ Generated types.ts')
  console.log('✓ Generated properties.ts')
  console.log(`\nImported ${Object.keys(types).length} types and ${Object.keys(properties).length} properties`)
}

// Run the import
importFromSeed().catch(console.error)
