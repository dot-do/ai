/** Common context passed to AI and workflow functions */
export interface AIFunctionContext {
  ai: AIInstance
  db: DBInstance<any>
}

/** Generic AI function */
export type AIFunction<I = any, O = any> = (input: I, ctx: AIFunctionContext) => Promise<O>

/** Runtime AI instance */
export interface AIInstance {
  [name: string]: AIFunction<any, any>
}

/** Shape of a database model */
export type ModelSchema = Record<string, any>

/** CRUD handlers for a collection */
export interface CollectionHandlers<T extends ModelSchema> {
  create(data: Omit<T, 'id'>): Promise<T & { id: string }>
  read(id: string): Promise<(T & { id: string }) | undefined>
  update(record: T & { id: string }): Promise<T & { id: string }>
  delete(id: string): Promise<void>
  search(query?: string): Promise<(T & { id: string })[]>
  getOrCreate(query: Partial<T>, generator?: () => Promise<T & { id: string }>): Promise<T & { id: string }>
}

/** Database instance generated by DB() */
export type DBInstance<S extends Record<string, ModelSchema>> = {
  [K in keyof S]: CollectionHandlers<S[K]>
}

/** Optional DB configuration */
export interface DBConfig {}

/** Handler for scheduled events */
export type EveryHandler = (event: { schedule: string }, ctx: AIFunctionContext) => Promise<any> | any

/** Handler for one-off events */
export type OnHandler<E = any> = (event: E, ctx: AIFunctionContext) => Promise<any> | any

export type Workflow = unknown
export type OnEvent = unknown
